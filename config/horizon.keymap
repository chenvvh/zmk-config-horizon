/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define SYM 1
#define FUN 2

&lt { flavor = "hold-preferred"; };

&sk {
    release-after-ms = <1200>;
    quick-release;
};

/ {
    macros {
        lb2: DTG {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_GUI>;
            label = "DTG";
        };

        lb1: gs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>;
            label = "GS";
        };
    };

    behaviors {
        comma: comma {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period: period {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question: question {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        LB: LB {
            compatible = "zmk,behavior-hold-tap";
            label = "LB";
            bindings = <&lb2>, <&lb1>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
        };

        sh: sh {
            compatible = "zmk,behavior-hold-tap";
            label = "SH";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
            hold-while-undecided;
            hold-while-undecided-linger;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC    &kp Q     &kp W     &kp E               &kp R        &kp T                               &kp Y      &kp U                &kp I      &kp O     &kp P      &kp BSPC
&kp TAB    &kp A     &kp S     &kp D               &kp F        &kp G                               &kp H      &kp J                &kp K      &kp L     &kp SQT    &kp ENTER
&kp LSHFT  &kp Z     &kp X     &kp C               &kp V        &kp B         &to 0      &to 5      &kp N      &kp M                &comma     &period   &question  &kp RSHFT
&kp LCTRL  &kp LALT  &kp LGUI  &lt 3 C_PLAY_PAUSE  &lt 2 ENTER  &lt 1 ESCAPE  &kp SPACE  &kp SPACE  &kp SPACE  &mt RIGHT_SHIFT TAB  &kp GLOBE  &kp RGUI  &kp RALT   &kp RCTRL
            >;
        };

        mod_sym {
            bindings = <
&trans         &trans                     &trans                         &trans                 &trans                 &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(GRAVE)  &sh LEFT_SHIFT LEFT_SHIFT  &sh LEFT_CONTROL LEFT_CONTROL  &sh LEFT_ALT LEFT_ALT  &sh LEFT_GUI LEFT_GUI  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans         &kp LG(LS(TAB))            &kp LG(TAB)                    &kp LC(LS(TAB))        &kp LC(TAB)            &LB LG(SPACE) 0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans         &trans                     &trans                         &trans                 &trans                 &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        nav_num {
            bindings = <
&trans             &kp LA(BSPC)  &kp BSPC      &kp UP     &kp DEL        &kp LA(DEL)                    &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &trans
&kp LG(BACKSPACE)  &kp LA(LEFT)  &kp LEFT      &kp DOWN   &kp RIGHT      &kp LA(RIGHT)                  &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &trans
&trans             &kp LG(UP)    &kp LG(LEFT)  &kp LSHFT  &kp LG(RIGHT)  &kp LG(DOWN)   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans             &trans        &trans        &trans     &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        media_func {
            bindings = <
&trans  &trans  &trans      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp C_MUTE  &kp C_VOL_DN          &kp C_VOLUME_UP       &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans                &trans                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans                &trans                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        device {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        steno {
            bindings = <
&trans  &kp Q   &kp W   &kp E   &kp R   &kp T                   &kp Y   &kp U   &kp I   &kp O   &kp P     &kp LBKT
&trans  &kp A   &kp S   &kp D   &kp F   &kp G                   &kp H   &kp J   &kp K   &kp L   &kp SEMI  &kp APOS
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &kp C   &kp V   &trans  &trans  &kp N   &kp M   &trans  &trans  &trans    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        device {
            if-layers = <1 2 3>;
            then-layer = <4>;
        };
    };
};
